name: Haskell CI

on:
  push:
    branches: [ "main", "release" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: haskread
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev/haskread/modulus-ai-repo
  POSTGRES_DB: modulus_test_db
  POSTGRES_USER: tushar
  POSTGRES_PASSWORD: 1234
  POSTGRES_HOST: localhost
  MODULUS_DB_TIMEOUT: 30
  MODULUS_APP_PORT: 8081
  MODULUS_JWT_SECRET: asdasdayour-super-secret-and-long-jwt-key
  MODULUS_LOG_LEVEL: DEBUG
  MODULUS_ENVIRONMENT: Development
  MODULUS_REDIS_URL: redis://localhost:6379
  MODULUS_API_TIMEOUT: 60
  MODULUS_MAILGUN_API: 1234
  MODULUS_FILE_UPLOAD_PATH: ./uploads

permissions:
  contents: read

jobs:

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/run-fourmolu@v11
        with:
          version: "latest"

  hlint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: 'Set up HLint'
      uses: haskell-actions/hlint-setup@v2
      with:
        version: '3.10'

    - name: 'Run HLint'
      uses: haskell-actions/hlint-run@v2
      with:
        path: modulus-ai-be/src/
        fail-on: warning

  test:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./modulus-ai-be/
        shell: bash

    services:
      postgres:
        image: pgvector/pgvector:pg17-trixie
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: tushar
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: modulus_test_db
        options: >-
          --health-cmd="pg_isready -U tushar"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Copy repo into actions 
      uses: actions/checkout@v4

    - name: Wait for DB to be healthy
      run: |
          for i in {1..10}; do
            pg_isready -h localhost -U tushar && exit 0
            echo "Waiting for database..."
            sleep 3
          done
          echo "Database did not become ready in time" >&2
          exit 1

    - name: install dependancies, build and export binaries.
      uses: freckle/stack-action@v5
      with:
        working-directory: ./modulus-ai-be/

  deploy-backend:
    if: github.ref == 'refs/heads/release'
    needs: test
    runs-on: ubuntu-22.04
    environment: development
    defaults:
      run:
        working-directory: ./modulus-ai-be/
        shell: bash

    steps:
    - name: Copy repo into actions 
      uses: actions/checkout@v4

    - name: install dependancies, build and export binaries.
      uses: freckle/stack-action@v5
      with:
        working-directory: ./modulus-ai-be/
        test: false
        stack-build-arguments: --copy-bins

    - name: Copy binary for docker
      run: cp /home/runner/.local/bin/modulus-ai-exe ./modulus-ai-exe

    - id: "auth"
      uses: "google-github-actions/auth@v2"
      with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"

    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v1"

    - name: "Use gcloud CLI"
      run: "gcloud info"

    - name: "Docker auth"
      run: |-
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

    - name: Build docker image
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-backend:$COMMIT_HASH
        docker build -f dockerfile.release -t $IMAGE_NAME .

    - name: Push image
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-backend:$COMMIT_HASH
        docker push $IMAGE_NAME
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init -input=false

    - name: Terraform Apply Backend
      env:
        TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
        TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
        TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
        TF_VAR_postgres_host: ${{ secrets.POSTGRES_HOST }}
        TF_VAR_modulus_jwt_secret: ${{ secrets.MODULUS_JWT_SECRET }}
        TF_VAR_modulus_mailgun_api: ${{ secrets.MODULUS_MAILGUN_API }}
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-backend:$COMMIT_HASH
        export TF_VAR_backend_image=$IMAGE_NAME
        terraform import \
          google_cloud_run_v2_service.backend \
          projects/haskread/locations/europe-west1/services/modulus-ai-backend || true
        terraform apply -auto-approve

  deploy-frontend:
    if: github.ref == 'refs/heads/release'
    needs: deploy-backend
    runs-on: ubuntu-22.04
    environment: development
    defaults:
      run:
        working-directory: ./modulus-ai-fe/
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build docker image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-frontend:$COMMIT_HASH
          docker build -f dockerfile.release -t $IMAGE_NAME . 

      - name: Push image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-frontend:$COMMIT_HASH
          docker push $IMAGE_NAME
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init -input=false

      - name: deploy to cloud run
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE_NAME=${{ env.GAR_LOCATION }}/modulus-ai-frontend:$COMMIT_HASH
          export TF_VAR_image_name=$IMAGE_NAME
          terraform import \
            google_cloud_run_v2_service.frontend \
            projects/haskread/locations/europe-west1/services/modulus-ai-frontend || true
          terraform apply -auto-approve
